
#!/usr/bin/env python3
import os
import subprocess
import json
import sys
import requests
from uitls import save_env
from pydantic import BaseModel
from typing import List

class PortTraffic(BaseModel):
    port: str
    in_bytes: int
    out_bytes: int
    counts: int

class ClientTraffic(BaseModel):
    client_id: str
    ip: str
    ports: List[PortTraffic]

table_family = os.getenv("inet", "inet")
table_name = os.getenv("traffic_stats", "traffic_stats")
ip = os.getenv("ipaddr")
client_id = os.getenv("client_id")
broker_url = os.getenv("broker_url")
count_path = os.getenv("traffic_count_path") 
count: int

def get_myif():
    """
    使用 subprocess 获取公网 IP（通过 ifconfig.me）
    返回字符串形式的 IP
    """
    try:
        result = subprocess.run(
            ["curl", "-s", "ifconfig.me"],
            capture_output=True,
            text=True,
            check=True
        )
        ip = result.stdout.strip()
        return ip
    except subprocess.CalledProcessError as e:
        print("获取公网 IP 失败:", e)
        return None

if not broker_url:
    print("broker is no defined")
    exit(1)

if not ip:
    try:
        ip = get_myif()
        if ip:
            save_env("ip", ip)
    except:
        print("ip can not save to env")
        exit(1)

if not client_id:
    client_id = ip

if not count_path:
    count_path = os.path.join(os.getcwd(), "count.txt")
    save_env("traffic_count_path", count_path)

if os.path.exists(count_path):
    with open(count_path, "r") as f:
        try:
            count = int(f.read())
        except ValueError:
            print("request count failer")
            exit(1)

def get_counters():
    """获取指定 table 的 counters 数据"""
    try:
        result = subprocess.run(
            ["sudo", "nft", "-j", "list", "counters", "table", table_family, table_name],
            capture_output=True,
            text=True,
            check=True
        )
        return json.loads(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"Error listing counters: {e.stderr}", file=sys.stderr)
        return {}

def reset_counters():
    """重置计数器"""
    try:
        subprocess.run(
            ["sudo", "nft", "reset", "counters", "table", table_family, table_name],
            check=True
        )
    except subprocess.CalledProcessError as e:
        print(f"Error resetting counters: {e.stderr}", file=sys.stderr)

def get_nft_counter():
    counters = get_counters()
    if counters:
        data = counters["nftables"]
        meta = data.pop(0)
        if "metainfo" in meta:
            return data
    return None

def get_payload(raw_traffic,ip, client_id):
    traffic = [c['counter'] for c in raw_traffic]
    ports_map = {}
    for raw in traffic:
        direction, port = raw['name'].split('_')  # port 直接是 str
        if port not in ports_map:
            ports_map[port] = {"in_bytes": 0, "out_bytes": 0, "counts": count}

        if direction == 's':
            ports_map[port]["in_bytes"] = raw['bytes']
        elif direction == 'd':
            ports_map[port]["out_bytes"] = raw['bytes']

        ports_map[port]["counts"] = count

    # 转成 PortTraffic 列表
    ports = [PortTraffic(port=p, **v) for p, v in ports_map.items()]
    client = ClientTraffic(client_id=client_id, ip=ip, ports=ports)
    return client.model_dump()
        
def increment_count():
    global count
    if count_path:
        count += 1
        with open(count_path, "w") as f:
            f.write(str(count))

def main():
    raw_traffic = get_nft_counter() 
    if raw_traffic and broker_url:
        payload = get_payload(raw_traffic, ip, client_id)
        reset_counters()
        increment_count()
        response = requests.post(broker_url, json=payload) #
        print(response.content, flush=True)
    else:
        print("on raw_traffic data",flush=True)

main()